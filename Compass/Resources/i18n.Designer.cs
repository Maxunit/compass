//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Compass.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class i18n {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal i18n() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Compass.Resources.i18n", typeof(i18n).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open {0} configuration menu. Use &quot;{1} &lt;toggle|on|off&gt;&quot; to enable/disable. Add &apos;p&apos; to the command to also save the state (&lt;togglep|onp|offp&gt;).
        /// </summary>
        internal static string command_help_text {
            get {
                return ResourceManager.GetString("command_help_text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please type &apos;/compass on&apos; or toggle the compass in the settings tab to reset the internal cache. Visiting a DeepDungeon/Chocobo race etc. unfortunately kills the mini map completely and as such the cache needs to be reset for the compass to work again..
        /// </summary>
        internal static string faq_compass_gone_entry {
            get {
                return ResourceManager.GetString("faq_compass_gone_entry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compass is wrong/missing after a DeepDungeon/Chocobo race/Lord of Verminion match etc.?.
        /// </summary>
        internal static string faq_compass_gone_header {
            get {
                return ResourceManager.GetString("faq_compass_gone_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently, there is no way to distinguish between FATE circles and quest circles. Each circle is therefore treated as belonging to a quest-in-progress and therefore always shown.
        ///.
        /// </summary>
        internal static string faq_fate_no_filter_circles_entry {
            get {
                return ResourceManager.GetString("faq_fate_no_filter_circles_entry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Why does filtering FATE markers does not filter out the FATE area circles?.
        /// </summary>
        internal static string faq_fate_no_filter_circles_header {
            get {
                return ResourceManager.GetString("faq_fate_no_filter_circles_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current implementation reads the minimap data and displays it on the monodimensional compass.
        ///This also works when the minimap HUD element is hidden..
        /// </summary>
        internal static string faq_how_does_this_work_entry {
            get {
                return ResourceManager.GetString("faq_how_does_this_work_entry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How does this work?.
        /// </summary>
        internal static string faq_how_does_this_work_header {
            get {
                return ResourceManager.GetString("faq_how_does_this_work_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because of the current implementation, only data the minimap knows about can be displayed. This usually means icons in the immediate vicinity of the player plus objective markers for the current tracked quests.
        ///Different zoom levels of the minimap influence not the overall distance but how soon the &apos;arrow&apos; icon for tracked quests turns into a more proper goal icon (e.g. area circle).
        ///I therefore recommend to zoom out as much as possible but this is entirely up to preference..
        /// </summary>
        internal static string faq_limitations_entry {
            get {
                return ResourceManager.GetString("faq_limitations_entry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What are the current limitations?.
        /// </summary>
        internal static string faq_limitations_header {
            get {
                return ResourceManager.GetString("faq_limitations_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The icons on the compass can be resized in this settings menu (other tab), the overall size of the compass (e.g. the height) is influenced by the global font scale set in Dalamud&apos;s settings.
        ///After modifying the font scale in Dalamud, a compass&apos; settings needs to be changed (e.g. disable/enable the compass) to recalculate the size..
        /// </summary>
        internal static string faq_resize_entry {
            get {
                return ResourceManager.GetString("faq_resize_entry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How can I resize the compass?.
        /// </summary>
        internal static string faq_resize_header {
            get {
                return ResourceManager.GetString("faq_resize_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The map (the one you can open via clicking on the minimap) has more data points of the current area and therefore, in theory, allows the compass to show more icons. When checking this setting, the compass will use the data from the mapinstead of the minimap to show the icons.
        ///This comes with its own trade-offs, however..
        /// </summary>
        internal static string faq_use_map_entry {
            get {
                return ResourceManager.GetString("faq_use_map_entry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What means using the map, and not the minimap, as source?.
        /// </summary>
        internal static string faq_use_map_header {
            get {
                return ResourceManager.GetString("faq_use_map_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The map needs to be open for the compass to be able to use it as the source. The map can, however, be made 100%% transparent via the settings and/or made very small. It also does not need to be in focus, only open.
        ///Furthermore, gathering points are only available when using the minimap as source. Last but not least, querying the map instead of the minimap is a more taxing operation and needs more resources..
        /// </summary>
        internal static string faq_use_map_tradeoffs_entry {
            get {
                return ResourceManager.GetString("faq_use_map_tradeoffs_entry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What trade-offs are there for using the map as source?.
        /// </summary>
        internal static string faq_use_map_tradeoffs_header {
            get {
                return ResourceManager.GetString("faq_use_map_tradeoffs_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current math only supports a minimap which is locked  (meaning north is always upwards). The minimap can be locked with a click on the cog on the minimap HUD element. (In the case of Material UI, its a lock, not a cog.).
        /// </summary>
        internal static string faq_wrong_placed_icons_entry {
            get {
                return ResourceManager.GetString("faq_wrong_placed_icons_entry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The icons are all placed wrong, what gives?.
        /// </summary>
        internal static string faq_wrong_placed_icons_header {
            get {
                return ResourceManager.GetString("faq_wrong_placed_icons_header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter ... on compass..
        /// </summary>
        internal static string filter_tab_text {
            get {
                return ResourceManager.GetString("filter_tab_text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thank you for installing the Compass plugin.
        ///Please have a look at the configuration, especially at the FAQ section, for a quick explanation of the current caveats and settings needed for the compass to work.
        ///May Hydaelyn protect you in your adventures across Eorzea and beyond!.
        /// </summary>
        internal static string fresh_install_note {
            get {
                return ResourceManager.GetString("fresh_install_note", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Continue the adventure.
        /// </summary>
        internal static string fresh_install_note_confirm_button {
            get {
                return ResourceManager.GetString("fresh_install_note_confirm_button", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide Compass when ... window is open..
        /// </summary>
        internal static string hide_compass_text {
            get {
                return ResourceManager.GetString("hide_compass_text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please read the FAQ for what that means and caveats..
        /// </summary>
        internal static string please_read_faq {
            get {
                return ResourceManager.GetString("please_read_faq", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FAQ.
        /// </summary>
        internal static string tab_header_faq {
            get {
                return ResourceManager.GetString("tab_header_faq", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filtering.
        /// </summary>
        internal static string tab_header_filter {
            get {
                return ResourceManager.GetString("tab_header_filter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hiding Options.
        /// </summary>
        internal static string tab_header_hiding_options {
            get {
                return ResourceManager.GetString("tab_header_hiding_options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        internal static string tab_header_settings {
            get {
                return ResourceManager.GetString("tab_header_settings", resourceCulture);
            }
        }
    }
}
